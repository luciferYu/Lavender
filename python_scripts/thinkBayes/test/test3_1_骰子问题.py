#!/data/exec/python/bin/python3
# -*- coding: utf-8 -*-
# @Time    : 2020/11/21 16:44
# @Author  : YuZhiYi
# @Email   : yuzhiyi@54.com
from thinkBayes.code.thinkbayes import Suite
# 骰子问题
#假设我有一盒骰子，里面有4个面的骰子、6面的骰子、8面的骰子、12面的骰子和20面的骰子各一个
#假如我随机从盒子中选一个骰子，转动它得到了6.那么每个骰子被选中的概率是多少

#通过3步策略来解决这个问题
#1.选择假设的表示方法
#2.选择数据的表示方法
#3.编写似然度函数

# 在前面的例子中用字符串来表示假设和数据吗，但骰子问题中将使用数字
# 确切的说使用整数 4 6 8 12 20 来假设
class Dice(Suite):
    def Likelihood(self,data,hypo):
        '''
        这里Likelihood的原理是：如果hypo<data,意味着投骰子大于骰子的面数
        显然这是一个不可能的情形，所以似然度是0
        另外的情况下，问题变成 考虑到所有假设的点数，得到某个点数结果的机会是多少
        答案是 1/hypo 无论数据是什么
        :param data: 
        :param hypo: 
        :return: 
        '''
        if hypo < data:
            return 0
        else:
            return 1.0/hypo


suit = Dice([4,6,8,12,20])
suit.Update(6) # 如果转动得到6
suit.Print()
'''
后验分布的结果如下
4 0.0
6 0.3921568627450981
8 0.29411764705882354
12 0.19607843137254904
20 0.11764705882352944
'''

# 当得到6后，骰子是4面的概率是0.最可能的备选是6面骰子，但也有约12%的可能是20面骰子
# 如果我们多摇几次，得到 6,8,7,7,5,4这样一组数据的情况下
for roll in [6,8,7,7,5,4]:
    suit.Update(roll)
print('-' * 50 )
suit.Print()

'''
4 0.0
6 0.0
8 0.9432484536722124
12 0.0552061280612909
20 0.001545418266496554
现在有94%的可能我们转动了一个8面骰子，同时还有0.1%可能是一个20面骰子
'''